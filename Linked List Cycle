/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
//  struct ListNode{
//     int val;
//     ListNode* next;
//      ListNode(int x) : val(x), next(NULL) {}


//  };
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if (!head || !head->next) return false;

        ListNode *slow = head;
        ListNode *fast = head->next;

        while (slow != fast) {
            if (!fast || !fast->next) return false;
            slow = slow->next;
            fast = fast->next->next;
        }

        return true;
    }
};


void createCycle(ListNode *head, int pos) {
    if (pos == -1) return;
    ListNode *tail = head;
    ListNode *cycleNode = nullptr;

    int index = 0;
    while (tail->next) {
        if (index == pos) cycleNode = tail;
        tail = tail->next;
        index++;
    }
    tail->next = cycleNode;
}
